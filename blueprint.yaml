# Copyright 2016 AT&T Intellectual Property, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

tosca_definitions_version: cloudify_dsl_1_3

description: >
  The blueprint describes an OpenStack vm created using Cloudify's OpenStack plugin
  and simple web server started using Cloudify's script plugin.
  In addition, an OpenStack floating ip and security group are created and associated with the created vm.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4.1/types.yaml
  - /tmp/cloudify/cloudify-openstack-plugin/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.4/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml

inputs:
  webserver_port:
    description: The HTTP web server port
    default: 8080
  image:
    description: Openstack image name or id to use for the new server
  flavor:
    description: Openstack flavor name or id to use for the new server
  external_network_name:
    description: External network name
  key_name:
    description: Name of private key
  ssh_key_filename:
    description: Filename of private key
  ssh_user:
    description: Name of user to SSH to on target machine
  ssh_port:
    description: SSH port

node_templates:
  virtual_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }
  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ http_web_server, port ] }
  vm:
    type: cloudify.openstack.nodes.Server
    properties:
      install_agent: false
      image: { get_input: image }
      flavor: { get_input: flavor }
      server:
        key_name:  { get_input: key_name }
    relationships:
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: virtual_ip
      - type: cloudify.openstack.server_connected_to_security_group
        target: security_group
    interfaces:
      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}
  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: 
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/configure.sh
            hide_output: &hide_output
              default:
                - running
            fabric_env: &simple_fabric_env
              default:
                user: { get_input: ssh_user }
                port: { get_input: ssh_port }
                key_filename: { get_input: ssh_key_filename }
                host_string: { get_attribute: [virtual_ip, floating_ip_address] }
                always_use_pty: true
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/start.sh
            hide_output: *hide_output
            fabric_env: *simple_fabric_env
        stop:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/stop.sh
            hide_output: *hide_output
            fabric_env: *simple_fabric_env

outputs:
  http_endpoint:
    description: Web server external endpoint
    value: { concat: ['http://', { get_attribute: [virtual_ip, floating_ip_address] },
                      ':', { get_property: [http_web_server, port] }] }
